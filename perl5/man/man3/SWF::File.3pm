.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SWF::File 3pm"
.TH SWF::File 3pm "2005-06-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::File \- Create SWF file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SWF::File;
\&
\&  $swf = SWF::File\->new(\*(Aqmovie.swf\*(Aq, Version => 4);
\&  # set header data
\&  $swf\->FrameSize( 0, 0, 1000, 1000);
\&  $swf\->FrameRate(12);
\&  # set tags
\&  $tag = SWF::Element::Tag\->new( .... )
\&  $tag\->pack($swf);
\&  ....
\&  # save SWF and close
\&  $swf\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISWF::File\fR module can be used to make \s-1SWF \s0(Macromedia Flash(R)) movie.
\&\fISWF::File\fR is a subclass of \fISWF::BinStream::Write\fR, so you can pack
\&\fISWF::Element::Tag\fRs in it.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "SWF::File\->new( [$filename, [Version => $version, FrameRate => $framerate, FrameSize => [$x1, $y1, $x2, $y2]]] )" 4
.el .IP "SWF::File\->new( [$filename, [Version => \f(CW$version\fR, FrameRate => \f(CW$framerate\fR, FrameSize => [$x1, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR]]] )" 4
.IX Item "SWF::File->new( [$filename, [Version => $version, FrameRate => $framerate, FrameSize => [$x1, $y1, $x2, $y2]]] )"
Creates a new \s-1SWF\s0 file.  
You can set \s-1SWF\s0 header parameters.
.Sp
\&\s-1NOTE:\s0 Unlike the previous version, \s-1SWF\s0 version can be set only here.  Default is 5.
.ie n .IP "$swf\->FrameRate( [$framerate] )" 4
.el .IP "\f(CW$swf\fR\->FrameRate( [$framerate] )" 4
.IX Item "$swf->FrameRate( [$framerate] )"
Sets and gets the frame rate of the movie (frames per second).
Default is 12.
.ie n .IP "$swf\->FrameSize( [$x1, $y1, $x2, $y2] )" 4
.el .IP "\f(CW$swf\fR\->FrameSize( [$x1, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR] )" 4
.IX Item "$swf->FrameSize( [$x1, $y1, $x2, $y2] )"
Sets the bounding box size of the movie frame in TWIPs (1 \s-1TWIP\s0 = 1/20 pixel),
and gets the size as \fISWF::Element::RECT\fR object.
Default is (0, 0, 12800, 9600).
.ie n .IP "$swf\->FrameCount( [$count] )" 4
.el .IP "\f(CW$swf\fR\->FrameCount( [$count] )" 4
.IX Item "$swf->FrameCount( [$count] )"
Sets and gets the frame count of the movie.
Usually you don't need to set because \fISWF::File\fR object automatically count
the \fIShowFrame\fR tags. If you want to set the different value, you should set
it just before \fI\f(CI$swf\fI\->close\fR.
.ie n .IP "$swf\->compress" 4
.el .IP "\f(CW$swf\fR\->compress" 4
.IX Item "$swf->compress"
Makes output \s-1SWF\s0 compressed. 
You should set the version to 6 or higher before call it.
.ie n .IP "$swf\->close( [$filename] ) / $swf\->save( [$filename] )" 4
.el .IP "\f(CW$swf\fR\->close( [$filename] ) / \f(CW$swf\fR\->save( [$filename] )" 4
.IX Item "$swf->close( [$filename] ) / $swf->save( [$filename] )"
Saves \s-1SWF\s0 to the file and closes it.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SWF::BinStream, SWF::Element
.PP
\&\s-1SWF\s0 file format specification from Macromedia.
