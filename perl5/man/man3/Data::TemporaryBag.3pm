.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TemporaryBag 3pm"
.TH TemporaryBag 3pm "2006-01-25" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Vb 3
\&    my $self = shift;
\&    my $fn = $self\->[FILENAME];
\&    my $fh = $self\->[FILEHANDLE];
\&
\&    if ($fh) {
\&        seek $fh, 0, SEEK_END;
\&        return tell($fh)\- $self\->[STARTPOS];
\&    } elsif ($fn) {
\&        return (\-s $fn) \- $self\->[STARTPOS];
\&    } else {
\&        return length($self\->[BUFFER]);
\&    }
.Ve
.SH "NAME"
Data::TemporaryBag \- Handle long size data using temporary file .
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::TemporaryBag;
\&
\&  $data = Data::TemporaryBag\->new;
\&  # add long string
\&  $data\->add(\*(AqABC\*(Aq x 1000);
\&  # You can use an overridden operator
\&  $data .= \*(AqDEF\*(Aq x 1000;
\&  ...
\&  $substr = $data\->substr(2997, 6);  # ABCDEF
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIData::TemporaryBag\fR module provides a \fIbag\fR object class handling long size 
data.  The short size data are kept on memory.  When the data size becomes 
over \fI\f(CI$Threshold\fI\fR size, they are saved into a temporary file internally.
.SS "\s-1METHOD\s0"
.IX Subsection "METHOD"
.IP "Data::TemporaryBag\->new( [$data] )" 4
.IX Item "Data::TemporaryBag->new( [$data] )"
Creates a \fIbag\fR object.
.ie n .IP "$bag\->clear" 4
.el .IP "\f(CW$bag\fR\->clear" 4
.IX Item "$bag->clear"
Clears \fI\f(CI$bag\fI\fR.
.ie n .IP "$bag\->add( $data )" 4
.el .IP "\f(CW$bag\fR\->add( \f(CW$data\fR )" 4
.IX Item "$bag->add( $data )"
Adds \fI\f(CI$data\fI\fR to \fI\f(CI$bag\fI\fR.
You can use an assignment operator '.=' instead.
.ie n .IP "$bag\->substr( $offset, $length, $replace )" 4
.el .IP "\f(CW$bag\fR\->substr( \f(CW$offset\fR, \f(CW$length\fR, \f(CW$replace\fR )" 4
.IX Item "$bag->substr( $offset, $length, $replace )"
Extracts a substring out of \fI\f(CI$bag\fI\fR.  It behaves similar to 
CORE::substr except that it can't be an lvalue.
.ie n .IP "$bag\->clone" 4
.el .IP "\f(CW$bag\fR\->clone" 4
.IX Item "$bag->clone"
Creates a clone of \fI\f(CI$bag\fI\fR.
.ie n .IP "$bag\->value" 4
.el .IP "\f(CW$bag\fR\->value" 4
.IX Item "$bag->value"
Gets data of \fI\f(CI$bag\fI\fR as a string.  It is possible that the string is 
extremely long.
.ie n .IP "$bag\->length" 4
.el .IP "\f(CW$bag\fR\->length" 4
.IX Item "$bag->length"
Gets length of data.
.ie n .IP "$bag\->defined" 4
.el .IP "\f(CW$bag\fR\->defined" 4
.IX Item "$bag->defined"
Returns if the data in \fI\f(CI$bag\fI\fR are defined or not.
.ie n .IP "$bag\->is_saved" 4
.el .IP "\f(CW$bag\fR\->is_saved" 4
.IX Item "$bag->is_saved"
Returns the file name if \fI\f(CI$bag\fI\fR is saved in a temporary file.
.SS "\s-1GLOBAL VARIABLES\s0"
.IX Subsection "GLOBAL VARIABLES"
.ie n .IP "$Data::TemporaryBag::Threshold" 4
.el .IP "\f(CW$Data::TemporaryBag::Threshold\fR" 4
.IX Item "$Data::TemporaryBag::Threshold"
The threshold of the data size in kilobytes whether saved into file or not.
Default is 10.
.ie n .IP "$data::TemporaryBag::MaxOpen" 4
.el .IP "\f(CW$data::TemporaryBag::MaxOpen\fR" 4
.IX Item "$data::TemporaryBag::MaxOpen"
The maximum number of the opened temporary files.
Default is 10.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
