.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SWF::BinStream::Codec 3pm"
.TH SWF::BinStream::Codec 3pm "2002-09-15" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::BinStream::Codec \- Document for SWF::BinStream codecs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use SWF::BinStream;
\&  ....
\&  $stream\->add_codec(\*(AqFoo\*(Aq);
\&
\&  \-\-\-\-
\&
\&  package SWF::BinStream::Codec::Foo;
\&
\&  $VERSION=\*(Aqx.xx\*(Aq;
\&
\&  package SWF::BinStream::Codec::Foo::Read;
\&
\&  sub new {}
\&  sub decode {}
\&  sub close {}
\&
\&  package SWF::BinStream::Codec::Foo::Write;
\&
\&  sub new {}
\&  sub encode {}
\&  sub close {}
\&
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISWF::BinStream:Codec::*\fR package provides additive codecs for \fISWF::BinStream\fR.
.PP
The whole package name must be 'SWF::BinStream::Codec::\fI[name]\fR'.
\&\fISWF::BinStream\fR use the package when its \fIadd_codec\fR method is called with the \fIname\fR.
Two sub package, 'SWF::BinStream::Codec::\fI[name]\fR::Read' and 'SWF::BinStream::Codec::\fI[name]\fR::Write'
should contain the package.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
The codec class must equip these methods. Each method should \fIdie\fR when error occurs.
.PP
\fISWF::BinStream::\fI[name]\fI::Read\fR
.IX Subsection "SWF::BinStream::[name]::Read"
.IP "SWF::BinStream::\fI[name]\fR::Read\->new;" 4
.IX Item "SWF::BinStream::[name]::Read->new;"
should return a new decoder. It does not take any parameters.
.ie n .IP "$codec\->decode( $data );" 4
.el .IP "\f(CW$codec\fR\->decode( \f(CW$data\fR );" 4
.IX Item "$codec->decode( $data );"
is called with the data read from the stream.
It should return decoded data.
.ie n .IP "$codec\->close;" 4
.el .IP "\f(CW$codec\fR\->close;" 4
.IX Item "$codec->close;"
is called when the stream is closed.
It does not take any parameters.
.PP
\fISWF::BinStream::\fI[name]\fI::Write\fR
.IX Subsection "SWF::BinStream::[name]::Write"
.IP "SWF::BinStream::\fI[name]\fR::Write\->new;" 4
.IX Item "SWF::BinStream::[name]::Write->new;"
should return a new encoder. It does not take any parameters.
.ie n .IP "$codec\->encode( $data );" 4
.el .IP "\f(CW$codec\fR\->encode( \f(CW$data\fR );" 4
.IX Item "$codec->encode( $data );"
is called with the data to write to the stream.
It should return encoded data.
.ie n .IP "$codec\->close( $data );" 4
.el .IP "\f(CW$codec\fR\->close( \f(CW$data\fR );" 4
.IX Item "$codec->close( $data );"
is called when the stream is to be closed.
It is called with the rest of bufferred data.
It should return encoded data.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
