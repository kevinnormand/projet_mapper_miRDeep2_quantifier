.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SWF::Parser 3pm"
.TH SWF::Parser 3pm "2005-06-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::Parser \- Parse SWF file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SWF::Parser;
\&
\&  $parser = SWF::Parser\->new( \*(Aqheader\-callback\*(Aq => \e&header, \*(Aqtag\-callback\*(Aq => \e&tag);
\&  # parse binary data
\&  $parser\->parse( $data );
\&  # or parse SWF file
\&  $parser\->parse_file( \*(Aqflash.swf\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISWF::Parser\fR module provides a parser for \s-1SWF \s0(Macromedia Flash(R))
file. It splits \s-1SWF\s0 into a header and tags and calls user subroutines.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "SWF::Parser\->new( 'header\-callback' => \e&headersub, 'tag\-callback' => \e&tagsub [, stream => $stream, header => 'no'])" 4
.el .IP "SWF::Parser\->new( 'header\-callback' => \e&headersub, 'tag\-callback' => \e&tagsub [, stream => \f(CW$stream\fR, header => 'no'])" 4
.IX Item "SWF::Parser->new( 'header-callback' => &headersub, 'tag-callback' => &tagsub [, stream => $stream, header => 'no'])"
Creates a parser.
The parser calls user subroutines when find \s-1SWF\s0 header and tags.
You can set \fISWF::BinStream::Read\fR object as the read stream.
If not, internal stream is used.
If you want to parse a tag block without \s-1SWF\s0 header, set header => 'no'.
.ie n .IP "&headersub( $self, $signature, $version, $length, $xmin, $ymin, $xmax, $ymax, $framerate, $framecount )" 4
.el .IP "&headersub( \f(CW$self\fR, \f(CW$signature\fR, \f(CW$version\fR, \f(CW$length\fR, \f(CW$xmin\fR, \f(CW$ymin\fR, \f(CW$xmax\fR, \f(CW$ymax\fR, \f(CW$framerate\fR, \f(CW$framecount\fR )" 4
.IX Item "&headersub( $self, $signature, $version, $length, $xmin, $ymin, $xmax, $ymax, $framerate, $framecount )"
You should define a \fIheader-callback\fR subroutine in your script.
It is called with the following arguments:
.Sp
.Vb 8
\&  $self:       Parser object itself.
\&  $signature:  \*(AqFWS\*(Aq for normal SWF and \*(AqCWS\*(Aq for compressed SWF.
\&  $version:    SWF version No.
\&  $length:     File length.
\&  $xmin, $ymin, $xmax, $ymax:
\&     Boundary rectangle size of frames, ($xmin,$ymin)\-($xmax, $ymax), in TWIPS(1/20 pixels).
\&  $framerate:  The number of frames per seconds.
\&  $framecount: Total number of frames in the SWF.
.Ve
.ie n .IP "&tagsub( $self, $tagno, $length, $datastream )" 4
.el .IP "&tagsub( \f(CW$self\fR, \f(CW$tagno\fR, \f(CW$length\fR, \f(CW$datastream\fR )" 4
.IX Item "&tagsub( $self, $tagno, $length, $datastream )"
You should define a \fItag-callback\fR subroutine in your script.
It is called with the following arguments:
.Sp
.Vb 4
\&  $self:       Parser object itself.
\&  $tagno:      The ID number of the tag.
\&  $length:     Length of tag.
\&  $datastream: The SWF::BinStream::Read object that can be read the rest of tag data.
.Ve
.ie n .IP "$parser\->parse( $data )" 4
.el .IP "\f(CW$parser\fR\->parse( \f(CW$data\fR )" 4
.IX Item "$parser->parse( $data )"
parses the data block as a \s-1SWF.\s0
Can be called multiple times.
.ie n .IP "$parser\->parse_file( $file );" 4
.el .IP "\f(CW$parser\fR\->parse_file( \f(CW$file\fR );" 4
.IX Item "$parser->parse_file( $file );"
parses a \s-1SWF\s0 file.
The argument can be a filename or an already opened file handle.
.ie n .IP "$parser\->parseheader;" 4
.el .IP "\f(CW$parser\fR\->parseheader;" 4
.IX Item "$parser->parseheader;"
parses a \s-1SWF\s0 header and calls \fI&headersub\fR.
You don't need to call this method specifically because 
this method is usually called from \fIparse\fR method.
.ie n .IP "$parser\->parsetag;" 4
.el .IP "\f(CW$parser\fR\->parsetag;" 4
.IX Item "$parser->parsetag;"
parses \s-1SWF\s0 tags and calls \fI&tagsub\fR.
You don't need to call this method specifically because 
this method is usually called from \fIparse\fR method.
.ie n .IP "$parser\->abort;" 4
.el .IP "\f(CW$parser\fR\->abort;" 4
.IX Item "$parser->abort;"
tells the parser to abort parsing.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2000 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SWF::BinStream, SWF::Element
.PP
\&\s-1SWF\s0 file format specification from Macromedia.
