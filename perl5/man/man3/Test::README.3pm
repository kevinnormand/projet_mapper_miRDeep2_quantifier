.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "README 3pm"
.TH README 3pm "2015-05-27" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::MockObject \- Perl extension for emulating troublesome interfaces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Test::MockObject;
\&  my $mock = Test::MockObject\->new();
\&  $mock\->set_true( \*(Aqsomemethod\*(Aq );
\&  ok( $mock\->somemethod() );
\& 
\&  $mock\->set_true( \*(Aqveritas\*(Aq)
\&       \->set_false( \*(Aqficta\*(Aq )
\&       \->set_series( \*(Aqamicae\*(Aq, \*(AqSunny\*(Aq, \*(AqKylie\*(Aq, \*(AqBella\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It's a simple program that doesn't use any other modules, and those are easy to
test.  More often, testing a program completely means faking up input to
another module, trying to coax the right output from something you're not
supposed to be testing anyway.
.PP
Testing is a lot easier when you can control the entire environment.  With
Test::MockObject, you can get a lot closer.
.PP
Test::MockObject allows you to create objects that conform to particular
interfaces with very little code.  You don't have to reimplement the behavior,
just the input and the output.
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
The full documentation for this module can be found at 
\&\s-1CPAN\s0 Search <http://search.cpan.org/dist/Test-MockObject>, 
MetaCPAN <http://www.metacpan.org/module/Test::MockObject>, 
or by running \f(CW\*(C`perldoc Test::MockObject\*(C'\fR at the commandline.
.SH "AUTHOR"
.IX Header "AUTHOR"
chromatic, <chromatic at wgz dot org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Test::Tutorial, Test::More,
http://www.perl.com/pub/a/2001/12/04/testing.html,
and
http://www.perl.com/pub/a/2002/07/10/tmo.html.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002 \- 2015 by chromatic <chromatic at wgz dot org>.
.PP
This program is free software; you can use, modify, and redistribute it under
the same terms as Perl 5.10.x itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
