.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SWF::Element 3pm"
.TH SWF::Element 3pm "2006-05-21" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
sub _unpack_JPEG {
    my ($self, \f(CW$stream\fR, \f(CW$len\fR) = \f(CW@_\fR;
    my ($data1, \f(CW$data2\fR);
.PP
.Vb 12
\&    while (!$data2 and $len > 0) {
\&        my $size = ($len > 1000) ? 1000 : $len;
\&        $data1 = $stream\->get_string($size);
\&        $len \-= $size;
\&        if ($data1 =~/\exff$/ and $len>0) {
\&            $data1 .= $stream\->get_string(1);
\&            $len\-\-;
\&        }
\&        ($data1, $data2) = split /\exff\exd9/, $data1;
\&        $self\->BitmapJPEGEncoding\->add($data1);
\&    }
\&    $self\->BitmapJPEGEncoding\->add("\exff\exd9");
\&
\&    $self\->BitmapJPEGImage($data2);
\&    while ($len > 0) {
\&        my $size = ($len > 1000) ? 1000 : $len;
\&        $data1 = $stream\->get_string($size);
\&        $len \-= $size;
\&        $self\->BitmapJPEGImage\->add($data1);
\&    }
\&}
.Ve
.PP
sub unpack {
    my ($self, \f(CW$stream\fR, \f(CW$flags\fR)=@_;
.PP
.Vb 6
\&    $self\->FontID   \->unpack($stream)    if ($flags & 8);
\&    $self\->TextColor\->unpack($stream)    if ($flags & 4);
\&    $self\->XOffset($stream\->get_SI16)    if ($flags & 1);
\&    $self\->YOffset($stream\->get_SI16)    if ($flags & 2);
\&    $self\->TextHeight($stream\->get_UI16) if ($flags & 8);
\&}
.Ve
.SH "NAME"
SWF::Element \- Classes of SWF tags and elements.  
See Element.pod for further information.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2000 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
