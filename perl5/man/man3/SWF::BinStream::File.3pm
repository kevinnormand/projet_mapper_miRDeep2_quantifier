.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SWF::BinStream::File 3pm"
.TH SWF::BinStream::File 3pm "2003-12-22" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::BinStream::File \- Read and write file as binary stream.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SWF::BinStream::File;
\&
\&  $read_file = SWF::BinStream::File::Read\->new(\*(Aqtest.swf\*(Aq);
\&  $byte = $read_file\->get_UI8;
\&  ....
\&  $read_file\->close;
\&
\&  $write_file = SWF::BinStream::Write\->new(\*(Aqnew.swf\*(Aq);
\&  $write_file\->set_UI8($byte);
\&  ....
\&  $write_file\->close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISWF::BinStream::File\fR module provides reading and writing binary
files as a binary stream.
.SS "SWF::BinStream::File::Read"
.IX Subsection "SWF::BinStream::File::Read"
is a subclass of SWF::BinStream::Read. You can get byte and bit
data from files.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
You can use the methods of \fISWF::BinStream::Read\fR except \fIadd_atream\fR.
.ie n .IP "SWF::BinStream::File::Read\->new( [ $file, $version ] )" 4
.el .IP "SWF::BinStream::File::Read\->new( [ \f(CW$file\fR, \f(CW$version\fR ] )" 4
.IX Item "SWF::BinStream::File::Read->new( [ $file, $version ] )"
creates a read stream connected with \fI\f(CI$file\fI\fR.  
\&\fI\f(CI$file\fI\fR is a file name or a file handle.  
\&\fI\f(CI$version\fI\fR is \s-1SWF\s0 version number.  Default is 5.
.ie n .IP "$stream\->open( $file )" 4
.el .IP "\f(CW$stream\fR\->open( \f(CW$file\fR )" 4
.IX Item "$stream->open( $file )"
opens another file and connect to the stream.
Even though the previous file is automatically closed
and the stream is cleared, \fI\f(CI$stream\fI\->tell\fR number is
continued.
.ie n .IP "$stream\->close" 4
.el .IP "\f(CW$stream\fR\->close" 4
.IX Item "$stream->close"
closes the file and clears the stream.
.SS "SWF::BinStream::File::Write"
.IX Subsection "SWF::BinStream::File::Write"
is a subclass of SWF::BinStream::Write. You can write byte and bit
data to a file.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
You can use the methods of \fISWF::BinStream::Write\fR except \fIautoflush\fR.
.ie n .IP "SWF::BinStream::File::Write\->new( [ $file, $version ] )" 4
.el .IP "SWF::BinStream::File::Write\->new( [ \f(CW$file\fR, \f(CW$version\fR ] )" 4
.IX Item "SWF::BinStream::File::Write->new( [ $file, $version ] )"
creates a stream writing to a file \fI\f(CI$file\fI\fR.  
\&\fI\f(CI$file\fI\fR is a file name or a file handle.  
\&\fI\f(CI$version\fI\fR is \s-1SWF\s0 version number.  Default is 5.
.ie n .IP "$stream\->open( $file )" 4
.el .IP "\f(CW$stream\fR\->open( \f(CW$file\fR )" 4
.IX Item "$stream->open( $file )"
opens another file and connect to the stream.
The stream is flushed and the previous file is closed.
.ie n .IP "$stream\->close" 4
.el .IP "\f(CW$stream\fR\->close" 4
.IX Item "$stream->close"
flushes the stream and closes the file.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SWF::BinStream
