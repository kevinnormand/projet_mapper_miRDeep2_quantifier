.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Outline 3pm"
.TH PDF::API2::Outline 3pm "2016-03-11" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Outline \- Manage PDF outlines (aka bookmarks)
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$otl = PDF::API2::Outline\->new $api,$parent,$prev" 4
.el .IP "\f(CW$otl\fR = PDF::API2::Outline\->new \f(CW$api\fR,$parent,$prev" 4
.IX Item "$otl = PDF::API2::Outline->new $api,$parent,$prev"
Returns a new outline object (called from \f(CW$otls\fR\->outline).
.ie n .IP "$otl\->title $text" 4
.el .IP "\f(CW$otl\fR\->title \f(CW$text\fR" 4
.IX Item "$otl->title $text"
Set the title of the outline.
.ie n .IP "$otl\->closed" 4
.el .IP "\f(CW$otl\fR\->closed" 4
.IX Item "$otl->closed"
Set the status of the outline to closed.
.ie n .IP "$otl\->open" 4
.el .IP "\f(CW$otl\fR\->open" 4
.IX Item "$otl->open"
Set the status of the outline to open.
.ie n .IP "$sotl=$otl\->outline" 4
.el .IP "\f(CW$sotl\fR=$otl\->outline" 4
.IX Item "$sotl=$otl->outline"
Returns a new sub-outline.
.ie n .IP "$otl\->dest $pageobj [, %opts]" 4
.el .IP "\f(CW$otl\fR\->dest \f(CW$pageobj\fR [, \f(CW%opts\fR]" 4
.IX Item "$otl->dest $pageobj [, %opts]"
Sets the destination page of the outline.
.ie n .IP "$otl\->dest( $page, \-fit => 1 )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fit => 1 )" 4
.IX Item "$otl->dest( $page, -fit => 1 )"
Display the page designated by page, with its contents magnified just enough to
fit the entire page within the window both horizontally and vertically. If the
required horizontal and vertical magnification factors are different, use the
smaller of the two, centering the page within the window in the other dimension.
.ie n .IP "$otl\->dest( $page, \-fith => $top )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fith => \f(CW$top\fR )" 4
.IX Item "$otl->dest( $page, -fith => $top )"
Display the page designated by page, with the vertical coordinate top positioned
at the top edge of the window and the contents of the page magnified just enough
to fit the entire width of the page within the window.
.ie n .IP "$otl\->dest( $page, \-fitv => $left )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fitv => \f(CW$left\fR )" 4
.IX Item "$otl->dest( $page, -fitv => $left )"
Display the page designated by page, with the horizontal coordinate left positioned
at the left edge of the window and the contents of the page magnified just enough
to fit the entire height of the page within the window.
.ie n .IP "$otl\->dest( $page, \-fitr => [ $left, $bottom, $right, $top ] )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fitr => [ \f(CW$left\fR, \f(CW$bottom\fR, \f(CW$right\fR, \f(CW$top\fR ] )" 4
.IX Item "$otl->dest( $page, -fitr => [ $left, $bottom, $right, $top ] )"
Display the page designated by page, with its contents magnified just enough to
fit the rectangle specified by the coordinates left, bottom, right, and top
entirely within the window both horizontally and vertically. If the required
horizontal and vertical magnification factors are different, use the smaller of
the two, centering the rectangle within the window in the other dimension.
.ie n .IP "$otl\->dest( $page, \-fitb => 1 )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fitb => 1 )" 4
.IX Item "$otl->dest( $page, -fitb => 1 )"
Display the page designated by page, with its contents magnified just
enough to fit its bounding box entirely within the window both horizontally and
vertically. If the required horizontal and vertical magnification factors are
different, use the smaller of the two, centering the bounding box within the
window in the other dimension.
.ie n .IP "$otl\->dest( $page, \-fitbh => $top )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fitbh => \f(CW$top\fR )" 4
.IX Item "$otl->dest( $page, -fitbh => $top )"
Display the page designated by page, with the vertical coordinate top
positioned at the top edge of the window and the contents of the page magnified
just enough to fit the entire width of its bounding box within the window.
.ie n .IP "$otl\->dest( $page, \-fitbv => $left )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-fitbv => \f(CW$left\fR )" 4
.IX Item "$otl->dest( $page, -fitbv => $left )"
Display the page designated by page, with the horizontal coordinate
left positioned at the left edge of the window and the contents of the page
magnified just enough to fit the entire height of its bounding box within the
window.
.ie n .IP "$otl\->dest( $page, \-xyz => [ $left, $top, $zoom ] )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$page\fR, \-xyz => [ \f(CW$left\fR, \f(CW$top\fR, \f(CW$zoom\fR ] )" 4
.IX Item "$otl->dest( $page, -xyz => [ $left, $top, $zoom ] )"
Display the page designated by page, with the coordinates (left, top) positioned
at the top-left corner of the window and the contents of the page magnified by
the factor zoom. A zero (0) value for any of the parameters left, top, or zoom
specifies that the current value of that parameter is to be retained unchanged.
.ie n .IP "$otl\->dest( $name )" 4
.el .IP "\f(CW$otl\fR\->dest( \f(CW$name\fR )" 4
.IX Item "$otl->dest( $name )"
(\s-1PDF 1.2\s0) Connect the Outline to a \*(L"Named Destination\*(R" defined elswere.
.ie n .IP "$otl\->url $url, %opts" 4
.el .IP "\f(CW$otl\fR\->url \f(CW$url\fR, \f(CW%opts\fR" 4
.IX Item "$otl->url $url, %opts"
Defines the outline as launch-url with url \f(CW$url\fR.
.ie n .IP "$otl\->file $file, %opts" 4
.el .IP "\f(CW$otl\fR\->file \f(CW$file\fR, \f(CW%opts\fR" 4
.IX Item "$otl->file $file, %opts"
Defines the outline as launch-file with filepath \f(CW$file\fR.
.ie n .IP "$otl\->pdfile $pdfile, $pagenum, %opts" 4
.el .IP "\f(CW$otl\fR\->pdfile \f(CW$pdfile\fR, \f(CW$pagenum\fR, \f(CW%opts\fR" 4
.IX Item "$otl->pdfile $pdfile, $pagenum, %opts"
Defines the destination of the outline as pdf-file with filepath \f(CW$pdfile\fR, \f(CW$pagenum\fR
and options \f(CW%opts\fR (same as dest).
